#!/usr/bin/env fift -s
"TonUtil.fif" include

{ ."usage: " @' $0 type ." <seller-addr-file> <seller-key-name> <seqno> <amount> <buyer-addr> <query-id> <number-of-goods> [<item-id> <item-quantity>] [<savefile>]" cr
  ."Creates a price estimation response that the seller may send to the buyer." cr
  ."Seller address is taken from <seller-addr-file>.addr" cr
  ."Seller contract owner's private key is loaded from the file <seller-key-name>.pk." cr
  ."<amount> is the estimated price in Grams of the buyer request." cr
  ."Buyer's address (without workchain) is provided as a decimal or hex number as <buyer-addr>." cr
  ."Query id of the request that is being responded is provided in <query-id>." cr
  ."The seller contract must be in the same workchain as the buyer." cr
  ."<number-of-goods> is the number of pairs of <item-id> <item-quantity> that follow." cr
  ."<number-of-goods> must be greater than 0, items ids and quantities are divided by spaces" cr
  ."Saves it into <savefile>.boc ('new-price-response-query.boc' by default)" cr
  1 halt
} : usage
$# 9 < ' usage if
$1 =: seller_addr_file
$2 =: key_name
$3 parse-int =: seqno
$4 $>GR =: amount
$5 parse-int =: buyer_addr
$6 parse-int =: query_id
$7 parse-int =: goods-num

goods-num 2 * 7 + constant min_params

$# dup min_params < swap min_params 1 + > or ' usage if

$# min_params > { @' min_params 1 + $() } { "new-price-response-query" } cond constant savefile

dictnew constant goods-dict
."Loading item ids " cr

goods-dict
// [ dict
8 // param number
// [dict, num
{
	dup 
	// [dict, num, num
	$() parse-int // item-id
	// [dict, num, id
	dup . cr // printing item-id
	// [dict, num, id
	swap
	// [dict, id, num
	1 +
	// [dict, id, num + 1
	dup
	// [dict, id, num + 1, num + 1
	$() parse-int // item-quantity
	// [dict, id, num + 1, quantity
	<b swap 32 u, b> <s
	// [dict, id, num + 1, quantity_slice
	2 roll
	// [dict, num + 1, quantity_slice, id
	3 roll
	// [num + 1, quantity_slice, id, dict
	32
	// [num + 1, quantity_slice, id, dict, 32
	udict! // udict! (val_slice x_key Dict n_key_len => D0 âˆ’1
	// [num + 1, dict, -1
	drop // result of adding to the dict
	// [num + 1, dict, -1
	swap
	// [dict, num + 1
	1 +
	// [dict, num + 2
} goods-num times

drop
constant goods-dict

seller_addr_file +".addr" load-address
2dup 2constant seller_addr
."Seller address = " 2dup .addr cr 6 .Addr cr

key_name +".pk" load-keypair 
constant key_priv
constant key_pub

60 60 * 24 * 7 * constant timeout   // response expires in 7 days

<b
   1 4 u, // Mode, 1 = responding with the price
   seqno 32 u,
   buyer_addr 256 u, // Client address
   query_id 32 u, 
   amount Gram,
   now timeout + 32 u, 
   goods-dict dict, b>
constant estimate_message

estimate_message hash key_priv ed25519_sign_uint constant signature

<b b{1000100} s, seller_addr addr, 0 Gram, b{00} s,
   signature B, estimate_message ref, b>
dup ."resulting external message: " <s csr. cr
2 boc+>B dup Bx. cr
savefile +".boc" tuck B>file
."(Saved to file " type .")" cr