//	=================================
//	=====	TEST FOR buyer.fc	=====
//	=================================
//	Given:
//		=> Not initialized buyer
//	Testing:
//		=> Initializing
//		=> Creating an order
//		=> Sending an order
//		=> Recieving the response
//		=> Paying for the goods

"TonUtil.fif" include

"test_key_b" constant key_name
"test buyer" constant name
60 60 * 24 * 7 * constant timeout   // request expires in 7 days
0 constant seqno

key_name +".pk" load-generate-keypair 
constant key_priv
constant key_pub

dictnew constant requests
dictnew constant responses

<b 
    seqno 32 u, 
    key_pub B,
    requests dict,
	responses dict,
	<b name $, b> ref,
 b> constant storage

<b
   0 4 u, // Mode, 0 = initializing the contract
   seqno 32 u,
b>
constant init_message

init_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, init_message ref, b>
<s constant signed_message

signed_message -1 code <s storage c7 runvmctx // Init

constant updated_storage
constant exit_code
."Updated storage: " cr updated_storage <s csr. cr
."Exit code " exit_code . cr cr

85143 code <s updated_storage c7 runvmctx // seqno

drop // updated storage
drop // exit code
."Seqno (should be 1): " cr
.dump cr cr

// =============================================================================== //
// ================================== NEXT TEST ================================== //
// =============================================================================== //

dictnew constant order_dict

<b 12 32 u, b> <s 9 order_dict 32 udict!

drop
constant order_dict

<b 2 32 u, b> <s 45 order_dict 32 udict!

drop
constant order_dict

<b 52 32 u, b> <s 7 order_dict 32 udict!

drop
constant order_dict

<b 
	timeout now + 32 u, // timeout
	order_dict dict,
b> constant order_body

now 10020 + constant query_id

<b
   1 4 u, // Mode, 1 = Creating a new order
   1 seqno + 32 u,
   query_id 32 u, // query_id
   order_body ref,
b>
constant new_order_message

new_order_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, new_order_message ref, b>
<s constant signed_message

signed_message -1 code <s updated_storage c7 runvmctx // New order

constant updated_storage_2
constant exit_code
."Updated storage: " cr updated_storage_2 <s csr. cr
."Exit code " exit_code . cr cr

73617 code <s updated_storage_2 c7 runvmctx // Get requests

drop // updated storage
drop // exit code
."Requests list (should be a new request with items 9,45,7): " cr
.dump cr cr


// =============================================================================== //
// ================================== NEXT TEST ================================== //
// =============================================================================== //

0 constant wc // same workchain as for the current contract, set in c7
100870126461620338394187119891701040242723685959666180064965254700620577097548 constant selller_addr

<b
   2 4 u, // Mode, 2 = sending an order to a seller
   2 seqno + 32 u,
   333 32 u, // bad query_id
   1 Gram,
   selller_addr 256 u,
b>
constant bad_send_order_message

bad_send_order_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, bad_send_order_message ref, b>
<s constant signed_message

signed_message -1 code <s updated_storage_2 c7 runvmctx // Send bad order

constant updated_storage_3
constant exit_code
."Updated storage: " cr updated_storage_3 <s csr. cr
."Exit code (should throw 276) " exit_code . cr cr

<b
   2 4 u, // Mode, 2 = sending an order to a seller
   2 seqno + 32 u,
   query_id 32 u, // query_id
   1 Gram,
   selller_addr 256 u,
b>

constant send_order_message

send_order_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, send_order_message ref, b>
<s constant signed_message

signed_message -1 code <s updated_storage_3 c7 runvmctx // Send good order

constant updated_storage_4
constant exit_code
."Updated storage: " cr updated_storage_4 <s csr. cr
."Exit code (should be 0) " exit_code . cr cr

// =============================================================================== //
// ================================== NEXT TEST ================================== //
// =============================================================================== //

<b b{1000100} s, wc selller_addr addr, 0 Gram, b{00} s, b> constant meta

dictnew constant goods_dict

<b 10 32 u, b> <s 9 goods_dict 32 udict!

drop
constant goods_dict

<b 54 32 u, b> <s 7 goods_dict 32 udict!

drop
constant goods_dict

<b
   112 Gram, // Mode, 1 = create a response
   1 4 u, // Status, 1 = price is given
   now timeout + 100 + 32 u, 
   goods_dict dict,
b> constant resp_body

<b
	query_id 32 u,
	resp_body ref,
b> <s constant message

0 meta message 0 code <s updated_storage_4 c7 runvmctx // Test for creating an order

constant updated_storage_5
constant exit_code
."Updated storage: " cr updated_storage_5 <s csr. cr
."Exit code (should be 0) " exit_code . cr cr

query_id 87810 code <s updated_storage_5 c7 runvmctx // Get responses

drop // updated storage
drop // exit code
."Responses list (should be a new response from 0 100870126461620338394187119891701040242723685959666180064965254700620577097548 with price 112, products 9 and 7): " cr
.dump cr cr

// =============================================================================== //
// ================================== NEXT TEST ================================== //
// =============================================================================== //

<b
   3 4 u, // Mode, 3 = paying to a seller
   3 seqno + 32 u,
   query_id 32 u, // query_id
   110 Gram, // Not enough moneys
   selller_addr 256 u,
b>
constant bad_payment_message

bad_payment_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, bad_payment_message ref, b>
<s constant signed_message

signed_message -1 code <s updated_storage_5 c7 runvmctx // Send bad payment

constant updated_storage_6
constant exit_code
."Updated storage: " cr updated_storage_6 <s csr. cr
."Exit code (should throw 432) " exit_code . cr cr

<b
   3 4 u, // Mode, 3 = paying to a seller
   3 seqno + 32 u,
   query_id 32 u, // query_id
   112 Gram,
   selller_addr 256 u,
b>
constant good_payment_message

good_payment_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, good_payment_message ref, b>
<s constant signed_message

signed_message -1 code <s updated_storage_6 c7 runvmctx // Send bad payment

constant updated_storage_7
constant exit_code
."Updated storage: " cr updated_storage_7 <s csr. cr
."Exit code (should be 0) " exit_code . cr cr