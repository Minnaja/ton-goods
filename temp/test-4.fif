"Asm.fif" include
// automatically generated from `./src/crypto/lib/stdlib.fc` `./src/crypto/common.fc` `./src/crypto/seller.fc` 
PROGRAM{
  DECLPROC get_my_workchain
  84712 DECLMETHOD get_my_wc
  DECLPROC save_internal_data
  DECLPROC load_internal_data
  DECLPROC send_money_back
  DECLPROC send_price_back
  DECLPROC create_order
  DECLPROC create_price_resp
  DECLPROC recv_internal
  DECLPROC remove_client_entries
  DECLPROC remove_expired_entries
  DECLPROC save_price_resp
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  71178 DECLMETHOD info
  74757 DECLMETHOD get_is_open
  80504 DECLMETHOD get_request_price
  103624 DECLMETHOD get_client_orders
  81759 DECLMETHOD get_new_clients
  117312 DECLMETHOD get_known_goods
  get_my_workchain PROC:<{
    MYADDR
    REWRITESTDADDR
    DROP
  }>
  get_my_wc PROC:<{
    get_my_workchain CALLDICT
  }>
  save_internal_data PROC:<{
    NEWC
    s1 s8 XCHG
    32 STU
    s1 s6 XCHG
    256 STU
    s1 s4 XCHG
    1 STU
    SWAP
    s0 s2 XCHG
    STGRAMS
    STDICT
    STDICT
    STDICT
    STREF
    ENDC
    c4 POP
  }>
  load_internal_data PROC:<{
    c4 PUSH
    CTOS
    32 LDU
    256 LDU
    1 LDU
    LDGRAMS
    LDDICT
    LDDICT
    LDDICT
    LDREF
    DROP
  }>
  send_money_back PROC:<{
    s0 s2 XCHG
    REWRITESTDADDR
    0 PUSHINT
    196 PUSHINT
    NEWC
    9 STU
    s1 s3 XCHG
    8 STI
    256 STU
    SWAP
    s0 s2 XCHG
    STGRAMS
    107 STU
    ENDC
    SWAP
    SENDRAWMSG
  }>
  send_price_back PROC:<{
    get_my_workchain CALLDICT
    NEWC
    s1 s3 XCHG
    32 STU
    STREF
    ENDC
    1 PUSHINT
    196 PUSHINT
    NEWC
    9 STU
    s1 s3 XCHG
    8 STI
    s1 s3 XCHG
    256 STU
    500000000 PUSHINT
    STGRAMS
    107 STU
    STREF
    ENDC
    3 PUSHINT
    SENDRAWMSG
  }>
  create_order PROC:<{
    s0 s5 XCHG
    REWRITESTDADDR
    get_my_workchain CALLDICT
    SWAP
    s0 s2 XCHG
    EQUAL
    370 THROWIFNOT
    8 PUSHPOW2
    OVER
    SWAP
    s7 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    NEWDICT
    SWAP
    IF:<{
      DROP
      LDDICT
      DROP
    }>ELSE<{
      SWAP
      DROP
    }>
    32 PUSHINT
    s6 PUSH
    SWAP
    s2 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    NIP
    902 THROWIF
    NEWDICT
    0 PUSHINT
    UNTIL:<{
      32 PUSHINT
      s7 PUSH
      SWAP
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        32 PUSHINT
        s2 PUSH
        SWAP
        s8 PUSH
        SWAP
        DICTUGET
        NULLSWAPIFNOT
        NIP
        IF:<{
          s0 s2 XCHG
          32 LDU
          DROP
          NEWC
          32 STU
          32 PUSHINT
          s1 s2 XCHG
          OVER
          s1 s5 XCHG
          s0 s5 XCHG
          DICTUSETB
        }>ELSE<{
          s1 s3 XCHG
          s0 s2 XCHG
          DROP
        }>
      }>ELSE<{
        s1 s3 XCHG
        s0 s2 XCHG
        DROP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    DROP
    s3 POP
    s4 POP
    NEWC
    s1 s3 XCHG
    32 STU
    STDICT
    32 PUSHINT
    s1 s3 XCHG
    s2 s4 XCHG
    DICTUSETB
    NEWC
    STDICT
    8 PUSHPOW2
    s1 s3 XCHG
    DICTUSETB
  }>
  create_price_resp PROC:<{
    NEWC
    SWAP
    s0 s4 XCHG
    STGRAMS
    s1 s3 XCHG
    4 STU
    32 STU
    STDICT
    ENDC
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    1 PUSHINT
    s1 s2 XCHG
    AND
    IFJMP:<{
      DROP
      DROP
      DROP
    }>
    OVER
    SEMPTY
    IFJMP:<{
      DROP
      DROP
      DROP
    }>
    load_internal_data CALLDICT
    s0 s8 XCHG
    LDMSGADDR
    DROP
    s0 s9 XCHG
    4 LDU
    32 LDU
    s7 PUSH
    0 EQINT
    IFJMP:<{
      DROP
      DROP
      DROP
      DROP
      DROP
      DROP
      DROP
      DROP
      DROP
      DROP
      DROP
      NIP
      0 PUSHINT
      64 PUSHINT
      send_money_back CALLDICT
    }>
    s2 PUSH
    1 EQINT
    IFJMP:<{
      s2 POP
      s5 PUSH
      s12 PUSH
      GREATER
      101 THROWIF
      SWAP
      LDREF
      DROP
      CTOS
      32 LDU
      NOW
      s2 PUSH
      SWAP
      LESS
      202 THROWIF
      LDDICT
      DROP
      s11 PUSH
      s0 s4 XCHG
      s1 s2 XCHG
      s6 PUSH
      SWAP
      s0 s6 XCHG
      create_order CALLDICT
      s3 PUSH
      s1 s2 XCHG
      s0 s8 XCHG
      save_internal_data CALLDICT
      s2 PUSH
      OVER
      GREATER
      IF:<{
        s1 s2 XCHG
        SUB
        0 PUSHINT
        send_money_back CALLDICT
      }>ELSE<{
        DROP
        DROP
        DROP
      }>
    }>
    DROP
    SWAP
    2 EQINT
    IFJMP:<{
      s9 PUSH
      REWRITESTDADDR
      DUMPSTK
      get_my_workchain CALLDICT
      SWAP
      s0 s2 XCHG
      EQUAL
      370 THROWIFNOT
      8 PUSHPOW2
      OVER
      SWAP
      s4 PUSH
      SWAP
      DICTUGET
      NULLSWAPIFNOT
      523 THROWIFNOT
      LDDICT
      DROP
      32 PUSHINT
      s3 PUSH
      SWAP
      s2 PUSH
      SWAP
      DICTUGET
      NULLSWAPIFNOT
      525 THROWIFNOT
      LDREF
      DROP
      CTOS
      LDGRAMS
      OVER
      s15 PUSH
      GREATER
      938 THROWIF
      4 LDU
      SWAP
      1 EQINT
      384 THROWIFNOT
      32 LDU
      NOW
      s2 PUSH
      SWAP
      LESS
      938 THROWIF
      LDDICT
      DROP
      2 PUSHINT
      s3 PUSH
      s0 s3 XCHG
      s0 s2 XCHG
      SWAP
      create_price_resp CALLDICT
      NEWC
      STREF
      32 PUSHINT
      s1 s3 XCHG
      s2 s5 XCHG
      DICTUSETB
      NEWC
      STDICT
      8 PUSHPOW2
      s1 s3 XCHG
      s1 s4 XCHG
      DICTUSETB
      SWAP
      s0 s8 XCHG
      save_internal_data CALLDICT
      s2 PUSH
      OVER
      GREATER
      IF:<{
        s1 s2 XCHG
        SUB
        0 PUSHINT
        send_money_back CALLDICT
      }>ELSE<{
        DROP
        DROP
        DROP
      }>
    }>
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    404 THROW
  }>
  remove_client_entries PROC:<{
    8 PUSHPOW2
    OVER
    s1 s4 XCHG
    s0 s4 XCHG
    DICTUDEL
    DROP
    8 PUSHPOW2
    s2 s3 XCHG
    s1 s3 XCHG
    DICTUDEL
    DROP
  }>
  remove_expired_entries PROC:<{
    OVER
    ISNULL
    IFNOT:<{
      0 PUSHINT
      UNTIL:<{
        8 PUSHPOW2
        s3 PUSH
        SWAP
        DICTUGETNEXT
        NULLSWAPIFNOT
        NULLSWAPIFNOT
        DUP
        IF:<{
          s2 PUSH
          ISNULL
          IFNOT:<{
            0 PUSHINT
            s0 s3 XCHG
            LDDICT
            DROP
            UNTIL:<{
              32 PUSHINT
              s1 s4 XCHG
              s4 PUSH
              SWAP
              DICTUGETNEXT
              NULLSWAPIFNOT
              NULLSWAPIFNOT
              DUP
              IF:<{
                s0 s2 XCHG
                32 LDU
                DROP
                NOW
                LESS
                IF:<{
                  32 PUSHINT
                  OVER
                  s1 s6 XCHG
                  s0 s6 XCHG
                  DICTUDEL
                  DROP
                }>ELSE<{
                  s0 s4 XCHG
                }>
              }>ELSE<{
                s1 s5 XCHG
                s0 s2 XCHG
                DROP
              }>
              SWAP
              NOT
            }>
            DROP
            s2 POP
          }>ELSE<{
            s0 s2 XCHG
            DROP
          }>
        }>ELSE<{
          s0 s2 XCHG
          DROP
        }>
        SWAP
        NOT
      }>
      DROP
    }>
    DUP
    ISNULL
    IFNOT:<{
      0 PUSHINT
      UNTIL:<{
        8 PUSHPOW2
        s2 PUSH
        SWAP
        DICTUGETNEXT
        NULLSWAPIFNOT
        NULLSWAPIFNOT
        DUP
        IF:<{
          s2 PUSH
          ISNULL
          IFNOT:<{
            s0 s2 XCHG
            LDDICT
            DROP
            0 PUSHINT
            UNTIL:<{
              32 PUSHINT
              s2 PUSH
              SWAP
              DICTUGETNEXT
              NULLSWAPIFNOT
              NULLSWAPIFNOT
              DUP
              IF:<{
                s0 s2 XCHG
                LDGRAMS
                NIP
                4 LDU
                32 LDU
                DROP
                SWAP
                1 EQINT
                IF:<{
                  NOW
                  LESS
                  IF:<{
                    32 PUSHINT
                    OVER
                    s1 s4 XCHG
                    s0 s4 XCHG
                    DICTUDEL
                    DROP
                  }>ELSE<{
                    s0 s2 XCHG
                  }>
                }>ELSE<{
                  s1 s3 XCHG
                  DROP
                }>
              }>ELSE<{
                s1 s3 XCHG
                s0 s2 XCHG
                DROP
              }>
              SWAP
              NOT
              s1 s2 XCHG
            }>
            DROP
            NEWC
            STDICT
            8 PUSHPOW2
            s1 s2 XCHG
            OVER
            s1 s5 XCHG
            s0 s5 XCHG
            DICTUSETB
          }>ELSE<{
            s1 s3 XCHG
            s0 s2 XCHG
            DROP
          }>
        }>ELSE<{
          s1 s3 XCHG
          s0 s2 XCHG
          DROP
        }>
        SWAP
        NOT
        s1 s2 XCHG
      }>
      DROP
    }>
  }>
  save_price_resp PROC:<{
    8 PUSHPOW2
    s2 PUSH
    SWAP
    s4 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    NEWDICT
    SWAP
    IF:<{
      DROP
      LDDICT
      DROP
    }>ELSE<{
      SWAP
      DROP
    }>
    NEWC
    s1 s5 XCHG
    STREF
    32 PUSHINT
    s1 s3 XCHG
    s1 s5 XCHG
    DICTUSETB
    NEWC
    STDICT
    8 PUSHPOW2
    s1 s3 XCHG
    s1 s2 XCHG
    DICTUSETB
  }>
  recv_external PROC:<{
    9 PUSHPOW2
    LDSLICEX
    LDREF
    DROP
    load_internal_data CALLDICT
    s8 PUSH
    HASHCU
    SWAP
    s0 s10 XCHG
    s7 PUSH
    CHKSIGNU
    1341 THROWIFNOT
    s0 s7 XCHG
    CTOS
    4 LDU
    32 LDU
    s8 PUSH
    SWAP
    s0 s2 XCHG
    EQUAL
    35 THROWIFNOT
    s0 s7 XCHG
    INC
    OVER
    0 EQINT
    IFJMP:<{
      NIP
      s6 POP
      s5 PUSH
      1 EQINT
      11 THROWIFNOT
      ACCEPT
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s2 s4 XCHG
      s1 s3 XCHG
      s0 s2 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    1 EQINT
    IFJMP:<{
      NIP
      s0 s6 XCHG
      256 LDU
      DUMPSTK
      32 LDU
      8 PUSHPOW2
      s3 PUSH
      SWAP
      s5 PUSH
      SWAP
      DICTUGET
      NULLSWAPIFNOT
      921 THROWIFNOT
      LDDICT
      DROP
      32 PUSHINT
      s3 PUSH
      SWAP
      s2 PUSH
      SWAP
      DICTUGET
      NULLSWAPIFNOT
      923 THROWIFNOT
      32 LDU
      DROP
      NOW
      LESS
      972 THROWIF
      ACCEPT
      SWAP
      LDGRAMS
      32 LDU
      LDDICT
      DROP
      32 PUSHINT
      s5 PUSH
      s0 s2 XCHG
      s1 s5 XCHG
      s0 s5 XCHG
      DICTUDEL
      DROP
      NEWC
      STDICT
      8 PUSHPOW2
      s1 s2 XCHG
      s6 PUSH
      s0 s2 XCHG
      s1 s8 XCHG
      s0 s8 XCHG
      DICTUSETB
      1 PUSHINT
      s2 s3 XCHG
      s2 s6 XCHG
      s1 s6 XCHG
      create_price_resp CALLDICT
      DUP
      s0 s10 XCHG
      s3 PUSH
      s3 PUSH
      save_price_resp CALLDICT
      s7 s8 XCHG
      s6 s8 XCHG
      s5 s8 XCHG
      s4 s8 XCHG
      s3 s8 XCHG
      s2 s8 XCHG
      SWAP
      s0 s10 XCHG
      save_internal_data CALLDICT
      s0 s2 XCHG
      SWAP
      send_price_back CALLDICT
      -1 PUSHINT
    }>
    OVER
    2 EQINT
    IFJMP:<{
      NIP
      s0 s6 XCHG
      32 LDU
      DROP
      1 PUSHINT
      NEWC
      1 STU
      32 PUSHINT
      s1 s3 XCHG
      s1 s4 XCHG
      DICTUSETB
      ACCEPT
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s2 s4 XCHG
      s0 s3 XCHG
      s1 s2 XCHG
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    3 EQINT
    IFJMP:<{
      NIP
      s0 s6 XCHG
      32 LDU
      DROP
      32 PUSHINT
      s1 s2 XCHG
      s1 s3 XCHG
      DICTUDEL
      DROP
      ACCEPT
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s2 s4 XCHG
      s0 s3 XCHG
      s1 s2 XCHG
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    4 EQINT
    IFJMP:<{
      NIP
      s4 POP
      s0 s5 XCHG
      1 LDU
      DROP
      ACCEPT
      s3 s7 XCHG
      s4 s6 XCHG
      s0 s5 XCHG
      s2 s4 XCHG
      s1 s3 XCHG
      s0 s2 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    6 EQINT
    IFJMP:<{
      NIP
      s6 POP
      SWAP
      s0 s6 XCHG
      remove_expired_entries CALLDICT
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s2 s4 XCHG
      s2 s3 XCHG
      s1 s2 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    OVER
    7 EQINT
    IFJMP:<{
      NIP
      s0 s6 XCHG
      256 LDU
      DROP
      s1 s2 XCHG
      s1 s7 XCHG
      remove_client_entries CALLDICT
      s5 s7 XCHG
      s4 s6 XCHG
      s3 s5 XCHG
      s2 s4 XCHG
      s2 s3 XCHG
      s1 s2 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    s6 POP
    DUP
    9 EQINT
    IF:<{
      s0 s6 XCHG
      8 LDU
      LDREF
      s0 s2 XCHG
      SENDRAWMSG
    }>ELSE<{
      s0 s6 XCHG
    }>
    s0 s6 XCHG
    15 EQINT
    IFJMP:<{
      s0 s5 XCHG
      256 LDU
      DROP
      ACCEPT
      s4 s7 XCHG
      s0 s6 XCHG
      s3 s5 XCHG
      s2 s4 XCHG
      s1 s3 XCHG
      s1 s2 XCHG
      SWAP
      save_internal_data CALLDICT
      -1 PUSHINT
    }>
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    404 PUSHINT
  }>
  seqno PROC:<{
    load_internal_data CALLDICT
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
    DROP
  }>
  info PROC:<{
    load_internal_data CALLDICT
    NIP
    NIP
    NIP
    NIP
    NIP
    NIP
    NIP
    CTOS
  }>
  get_is_open PROC:<{
    load_internal_data CALLDICT
    DROP
    DROP
    DROP
    DROP
    DROP
    NIP
    NIP
  }>
  get_request_price PROC:<{
    load_internal_data CALLDICT
    DROP
    DROP
    DROP
    DROP
    NIP
    NIP
    NIP
  }>
  get_client_orders PROC:<{
    load_internal_data CALLDICT
    DROP
    DROP
    NIP
    NIP
    NIP
    NIP
    NIP
    DUP
    ISNULL
    IFJMP:<{
      DROP
      DROP
      PUSHNULL
    }>
    8 PUSHPOW2
    DICTUGET
    NULLSWAPIFNOT
    IFNOTJMP:<{
      DROP
      PUSHNULL
    }>
    DUP
    ISNULL
    IFJMP:<{
      DROP
      PUSHNULL
    }>
    PUSHNULL
    0 PUSHINT
    s0 s2 XCHG
    LDDICT
    DROP
    UNTIL:<{
      32 PUSHINT
      s1 s3 XCHG
      s3 PUSH
      SWAP
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        PUSHNULL
        0 PUSHINT
        s0 s4 XCHG
        32 LDU
        LDDICT
        DROP
        UNTIL:<{
          32 PUSHINT
          s1 s6 XCHG
          s6 PUSH
          SWAP
          DICTUGETNEXT
          NULLSWAPIFNOT
          NULLSWAPIFNOT
          DUP
          IF:<{
            s0 s2 XCHG
            32 LDU
            DROP
            OVER
            SWAP
            PAIR
            s1 s4 XCHG
            CONS
          }>ELSE<{
            s1 s4 XCHG
            s0 s2 XCHG
            DROP
          }>
          SWAP
          NOT
          s3 s6 XCHG
          s1 s3 XCHG
        }>
        DROP
        s4 POP
        s2 PUSH
        s0 s2 XCHG
        s1 s4 XCHG
        s0 s4 XCHG
        TRIPLE
        s1 s3 XCHG
        CONS
      }>ELSE<{
        s1 s3 XCHG
        s0 s2 XCHG
        DROP
      }>
      SWAP
      NOT
      s2 s3 XCHG
      s1 s2 XCHG
    }>
    DROP
    NIP
  }>
  get_new_clients PROC:<{
    load_internal_data CALLDICT
    DROP
    DROP
    NIP
    NIP
    NIP
    NIP
    NIP
    DUP
    ISNULL
    IFJMP:<{
      DROP
      PUSHNULL
    }>
    0 PUSHINT
    PUSHNULL
    get_my_workchain CALLDICT
    UNTIL:<{
      8 PUSHPOW2
      s1 s3 XCHG
      s4 PUSH
      SWAP
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      s2 POP
      OVER
      IF:<{
        s3 PUSH
        OVER
        PAIR
        s1 s3 XCHG
        CONS
      }>ELSE<{
        s0 s2 XCHG
      }>
      SWAP
      NOT
      s2 s3 XCHG
      s1 s2 XCHG
    }>
    DROP
    NIP
    NIP
  }>
  get_known_goods PROC:<{
    load_internal_data CALLDICT
    DROP
    DROP
    DROP
    NIP
    NIP
    NIP
    NIP
    DUP
    ISNULL
    IFJMP:<{
      DROP
      PUSHNULL
    }>
    0 PUSHINT
    PUSHNULL
    UNTIL:<{
      32 PUSHINT
      s1 s2 XCHG
      s3 PUSH
      SWAP
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      s2 POP
      OVER
      IF:<{
        s0 s2 XCHG
        s2 PUSH
        PAIR
      }>ELSE<{
        s0 s2 XCHG
      }>
      SWAP
      NOT
    }>
    NIP
    NIP
  }>
}END>c
constant code


"TonUtil.fif" include

0 =: workchain

5557774444 =: contract_address_int
<b b{100} s, workchain 8 u, contract_address_int 256 u, b> <s =: contract_address_full
// Check if two below work same as the one above
// <b b{10} s, workchain 8 i, contract_address_int 256 u, b> <s =: contract_address_full
// <b 2 2 u, workchain 8 i, contract_address_int 256 u, b> <s =: contract_address_full

0 tuple 0x076ef1ea , // magic
0 , 0 , // actions msg_sents
1570470873 , // unix_time
1 , 1 , 0 , // block_lt, trans_lt, rand_seed
0 tuple 9223372036854775807 , dictnew , , // remaining balance
contract_address_full , dictnew , // contract_address, global_config
1 tuple // wrap to another tuple
constant c7 
//	=================================
//	=====	TEST FOR seller.fc	=====
//	=================================
//	Given:
//		=> Seller with initialized list of goods
//	Testing:
//		=> Adding new item
//		=> Removing an item
//		=> Closing the store
//		=> Opening the store

"TonUtil.fif" include


"test_key" constant key_name
7 constant seqno

key_name +".pk" load-generate-keypair 
constant key_priv
constant key_pub

dictnew constant goods_dict
// Known goods
<b 1 1 u, b> <s 55 goods_dict 32 udict!
drop
constant goods_dict
<b 1 1 u, b> <s 45 goods_dict 32 udict!
drop
constant goods_dict
<b 1 1 u, b> <s 72 goods_dict 32 udict!
drop
constant goods_dict
<b 1 1 u, b> <s 9 goods_dict 32 udict!
drop
constant goods_dict
dictnew constant clients_price_requests
dictnew constant clients_price_responses

<b 
    seqno 32 u, 
    key_pub B,
    1 1 u, // is_open
    0 Gram, // request is free
    goods_dict dict,
    clients_price_requests dict,
    clients_price_responses dict,
	<b "test name" $, b> ref,
 b> constant storage

<b
   2 4 u, // Mode, 2 = adding an item
   seqno 32 u,
   9530 32 u, // New item id
b>
constant add_message

add_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, add_message ref, b>
 <s constant signed_message

signed_message -1 code <s storage c7 runvmctx // Adding an item

constant updated_storage
constant exit_code

117312 code <s updated_storage c7 runvmctx // known goods

drop // updated storage
drop // exit code
."Known goods list (should contain 9530): " cr
.dump cr cr

// =============================================================================== //
// ================================== NEXT TEST ================================== //
// =============================================================================== //

<b
   3 4 u, // Mode, 3 = removing an item
   1 seqno + 32 u,
   72 32 u, // Old item id
b>
constant remove_message

remove_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, remove_message ref, b>
 <s constant signed_message

signed_message -1 code <s updated_storage c7 runvmctx // Removing an item

constant updated_storage_2
constant exit_code

117312 code <s updated_storage_2 c7 runvmctx // known goods

drop // updated storage
drop // exit code
."Known goods list (should not contain 72): " cr
.dump cr cr

// =============================================================================== //
// ================================== NEXT TEST ================================== //
// =============================================================================== //

<b
   4 4 u, // Mode, 4 = open/close the store
   2 seqno + 32 u,
   0 1 u, // Store is closed
b>
constant close_message

close_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, close_message ref, b>
 <s constant signed_message

signed_message -1 code <s updated_storage_2 c7 runvmctx // Closing the store

constant updated_storage_3
constant exit_code
."Exit code " exit_code . cr

74757 code <s updated_storage_3 c7 runvmctx // is_open

drop // updated storage
constant exit_code
."Exit code " exit_code . cr
."Is open (should be 0): " cr
.dump cr cr

// =============================================================================== //
// ================================== NEXT TEST ================================== //
// =============================================================================== //

<b
   4 4 u, // Mode, 4 = open/close the store
   3 seqno + 32 u,
   1 1 u, // Store is open
b>
constant open_message

open_message hash key_priv ed25519_sign_uint constant signature

<b
   signature B, open_message ref, b>
 <s constant signed_message

signed_message -1 code <s updated_storage_3 c7 runvmctx // Opening the store

constant updated_storage_4
constant exit_code
."Exit code " exit_code . cr

74757 code <s updated_storage_4 c7 runvmctx // is_open

drop // updated storage
constant exit_code
."Exit code " exit_code . cr
."Is open (should be 1): " cr
.dump cr cr